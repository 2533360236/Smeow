// Generated by CoffeeScript 1.6.2
(function() {
  var MATCH_MD, Main, colors, expand, fs, htmlminifier, marked, path, program,
    __slice = [].slice;

  colors = require("colors");

  marked = require("marked");

  program = require("commander");

  expand = require("glob-expand");

  htmlminifier = require("html-minifier");

  fs = require("fs-extra");

  path = require("path");

  MATCH_MD = /{{#md\s*([^}]+)\s*}}/g;

  module.exports = Main = (function() {
    Main.prototype._input = null;

    Main.prototype._output = null;

    Main.prototype._files = null;

    function Main() {
      var pkg;

      pkg = JSON.parse(fs.readFileSync(path.resolve(__dirname, "../package.json")).toString());
      program.version(pkg.version).option("-i, --input <path>", "input folder of your files" + " (required)".red).option("-o, --output <path>", "output folder where your files will be saved" + " (default to --input)".grey).parse(process.argv);
      marked.setOptions({
        gfm: true,
        breaks: true,
        sanitize: false
      });
      this._input = program.input;
      this._output = program.output || program.input;
      this._files = this._findFiles();
      this._parseFile();
    }

    /*
    	Find the files on the directory
    */


    Main.prototype._findFiles = function() {
      return expand({
        cwd: this._input
      }, ["**/*.*", "!node_modules/**", "!**/*.md"]);
    };

    /*
    	Load and parse the file
    */


    Main.prototype._parseFile = function() {
      var data, fileName, fileType, i, markdownData, match, succeeded, tags;

      fileName = this._files.shift();
      fileType = fileName.lastIndexOf(".") >= 0 ? fileName.substring(fileName.lastIndexOf(".") + 1, fileName.length).toLowerCase() + "" : void 0;
      this._debug("Reading".yellow, ("" + (this._input + fileName)).yellow.bold + "...".yellow);
      data = fs.readFileSync(this._input + fileName).toString();
      if (data == null) {
        return this._debug("An error ocurred when reading the file".red, ("" + fileName).red.bold);
      }
      tags = ((function() {
        var _results;

        _results = [];
        while (match = MATCH_MD.exec(data)) {
          _results.push({
            start: match.index,
            end: match.index + match[0].length,
            name: this._input + match[1]
          });
        }
        return _results;
      }).call(this));
      if (tags.length) {
        i = tags.length;
        succeeded = 0;
        while (i--) {
          if (!fs.existsSync(tags[i].name)) {
            this._debug("- The file".red, ("" + tags[i].name).red.bold, "could not be found! Skipping it...".red);
            continue;
          }
          markdownData = fs.readFileSync(tags[i].name).toString();
          markdownData = marked(markdownData);
          markdownData = htmlminifier.minify(markdownData, {
            collapseWhitespace: true
          });
          markdownData = markdownData.replace(/"/g, "\'");
          data = data.substring(0, tags[i].start) + markdownData + data.substring(tags[i].end);
          succeeded++;
        }
        this._debug(("- " + succeeded).bold.blue, "tag(s) were found and replaced successfuly in".blue, ("" + (this._output + fileName) + "\n").bold.blue);
      }
      fs.outputFileSync(this._output + fileName, data);
      if (this._files.length) {
        return this._parseFile();
      } else {
        return this._completed();
      }
    };

    Main.prototype._debug = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return console.log(args.join(" "));
    };

    /*
    	Complete the process
    */


    Main.prototype._completed = function() {
      var code;

      console.log("Completed! :)".bold.green);
      return process.exit(code = 0);
    };

    return Main;

  })();

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
